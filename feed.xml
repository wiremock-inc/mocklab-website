<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://www.mocklab.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.mocklab.io/" rel="alternate" type="text/html" /><updated>2022-01-14T17:38:49+00:00</updated><id>https://www.mocklab.io/feed.xml</id><title type="html">MockLab</title><subtitle>MockLab is the hosted API mocking tool built on WireMock</subtitle><author><name>Your Name</name></author><entry><title type="html">Postman Mock Server vs. MockLab</title><link href="https://www.mocklab.io/blog/postman-mock-server-vs-mocklab/" rel="alternate" type="text/html" title="Postman Mock Server vs. MockLab" /><published>2021-03-24T00:00:00+00:00</published><updated>2021-03-24T00:00:00+00:00</updated><id>https://www.mocklab.io/blog/postman-mock-server-vs-mocklab</id><content type="html" xml:base="https://www.mocklab.io/blog/postman-mock-server-vs-mocklab/">&lt;p&gt;Postman is indisputably the dominant HTTP testing tool on the market today, and
if you’re involved in developing or testing APIs it’s highly likely you’ve used it
(or know someone who does at least).&lt;/p&gt;

&lt;p&gt;A feature of Postman is “mock servers”, which allows mock APIs to be generated from
from Collections (Postman’s main data model - sets of request and response examples). This
article compares Postman’s capabilities and approach to API mocking with MockLab’s,
examining the relative strengths and best use of each.&lt;/p&gt;

&lt;h2 id=&quot;terminology&quot;&gt;Terminology&lt;/h2&gt;

&lt;p&gt;The concepts underlying Postman’s and MockLab’s mocking capabilities are very similar,
but some naming and terminology differs. The following table describes both
products’ terms for each major concept:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;MockLab&lt;/th&gt;
      &lt;th&gt;Postman&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Mock API&lt;/td&gt;
      &lt;td&gt;Mock Server&lt;/td&gt;
      &lt;td&gt;A container for stubs/examples. Accessed via a unique domain name.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Stub&lt;/td&gt;
      &lt;td&gt;Example&lt;/td&gt;
      &lt;td&gt;Specification of a request to be matched, paired with the response to be returned.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Response Templating&lt;/td&gt;
      &lt;td&gt;Dynamic Responses&lt;/td&gt;
      &lt;td&gt;Responses that contain random values, variables or request data.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;getting-up-and-running&quot;&gt;Getting up and running&lt;/h2&gt;

&lt;p&gt;With both products you need to sign-up/log into a user account in order to create a mock API/server.&lt;/p&gt;

&lt;p&gt;In Postman you create a mock server either via the context menu for a collection, or from the Mock Servers tab:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/postman-vs-mocklab/postman-new-mock-server.png&quot; style=&quot;border: none&quot; alt=&quot;Postman new mock server&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In MockLab you can create a new mock API via the “+ Mock API” button on the top bar:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/postman-vs-mocklab/mocklab-new-mock-api.png&quot; style=&quot;border: none&quot; alt=&quot;MockLab new mock API&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;base-urls-and-domain-names&quot;&gt;Base URLs and domain names&lt;/h3&gt;

&lt;p&gt;To use a mock server/API in either product, a unique base URL is needed.&lt;/p&gt;

&lt;p&gt;Postman will generate a unique domain name for a mock server using a UUID for the
hostname e.g.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://aab7bb9b-4a59-4169-bd3a-697274f033f7.mock.pstmn.io&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;MockLab will also generate a unique domain name, using a short hash for the hostname e.g.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://nd7dd.mocklab.io&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;MockLab also permits you to optionally choose a hostname of your own, so you can
create a mock API with a base URL like&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://acme-payments-api.mocklab.io&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;creating-stubs-and-examples&quot;&gt;Creating stubs and examples&lt;/h2&gt;

&lt;p&gt;In Postman, examples in a collection are used directly to configure responses in
the mock server. Adding a new example to a request in a collection will automatically
add it to the mock server:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/postman-vs-mocklab/postman-new-example.png&quot; style=&quot;border: none&quot; alt=&quot;Postman new example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In MockLab, stubs are added directly from within a mock API’s Stubs page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/postman-vs-mocklab/mocklab-new-stub.png&quot; style=&quot;border: none&quot; alt=&quot;MockLab new stub&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;matching-requests&quot;&gt;Matching requests&lt;/h2&gt;

&lt;p&gt;An essential component of mocking is request matching. The mocking tool must
select the correct response for the incoming request based on a set of criteria.&lt;/p&gt;

&lt;p&gt;This is often as simple as checking that the HTTP method and URL are exactly equal but
it’s not uncommon to need to match headers, cookies or request body elements.
Sometimes it’s also necessary to match more loosely e.g. when we want to return
a response regardless of the user ID passed in the URL path.&lt;/p&gt;

&lt;h3 id=&quot;url-and-query&quot;&gt;URL and query&lt;/h3&gt;

&lt;p&gt;Postman supports a degree of request matching flexibility above simple method + URL
equality.&lt;/p&gt;

&lt;p&gt;In your URL path you can specify a parameter name and this will be treated as a wildard, so any value will be accepted:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/postman-vs-mocklab/postman-path-parameter.png&quot; alt=&quot;Postman path parameter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;MockLab also supports loose matching of URL paths, but via the use of regular expressions
rather than named parameters:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/postman-vs-mocklab/mocklab-loose-url-matching.png&quot; style=&quot;width: 80%&quot; alt=&quot;MockLab loose URL matching&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This gives some additional control over named parameters - you can use very loose
regex expressions that will match anything, or choose to constrain the range of valid
values to e.g. just numbers.&lt;/p&gt;

&lt;h3 id=&quot;query-parameters-headers-and-cookies&quot;&gt;Query parameters, headers and cookies&lt;/h3&gt;

&lt;p&gt;Postman doesn’t use query parameters, headers or cookies in its matching process,
so a request sent with any combination of these values will always be matched provided
the method and URL are correct.&lt;/p&gt;

&lt;p&gt;MockLab supports matching of all of these attributes. It also provides a variety
of predicates, so that it’s possible to match loosely or precisely, depending on your needs.&lt;/p&gt;

&lt;p&gt;For instance, you could match a request with a query parameter of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;search&lt;/code&gt;
exactly equalling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyjamas&lt;/code&gt;, an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Accept&lt;/code&gt; header containing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt; and a cookie named
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;session&lt;/code&gt; that consists of lowercase alphanumerics only:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/postman-vs-mocklab/mocklab-request-attribute-matching.png&quot; style=&quot;width: 80%&quot; alt=&quot;MockLab query, header and cookie matching&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;request-body&quot;&gt;Request body&lt;/h3&gt;

&lt;p&gt;Matching the request body is also a requirement in many situations. For instance,
if you want to test a successful outcome when one variant of a request payload is
POSTed to the API and an error when a different variant is sent, you need to be able
to distinguish between request body contents.&lt;/p&gt;

&lt;p&gt;By default, Postman will ignore the request body when matching a request. However,
you can make it include the request body, evaluating an exact match by including the
following header in the HTTP request:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;x-mock-match-request-body: true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is quite limiting for a couple of reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It requires you to modify your application under test in order to make it send the header.&lt;/li&gt;
  &lt;li&gt;Exact matching on request bodies can fail when whitespace varies, or when volatile data such as transaction IDs are present.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;MockLab can match the request body without the need to modify requests sent by
the app under test. It offers a set of predicates that support flexible
matching of input in JSON, XML or plain text.&lt;/p&gt;

&lt;p&gt;For example, you could match a request with a JSON body of the correct general structure
and one field exactly specified using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;equalToJson&lt;/code&gt; predicate:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/postman-vs-mocklab/mocklab-body-matching.png&quot; style=&quot;width: 80%&quot; alt=&quot;MockLab body matching&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;debugging&quot;&gt;Debugging&lt;/h2&gt;

&lt;p&gt;When testing a system with your mock APIs, sooner or later you’re going to want to see
the details of requests that were made. Both products have a request log feature
for this purpose, with each presenting very similar information.&lt;/p&gt;

&lt;p&gt;Postman:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/postman-vs-mocklab/postman-request-log.png&quot; style=&quot;border: none&quot; alt=&quot;Postman request log&quot; /&gt;&lt;/p&gt;

&lt;p&gt;MockLab:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/postman-vs-mocklab/mocklab-request-log.png&quot; style=&quot;border: none&quot; alt=&quot;MockLab request log&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;unmatched-requests&quot;&gt;Unmatched requests&lt;/h3&gt;

&lt;p&gt;A common issue when working with mock APIs is when a request made by your app under test isn’t matched.&lt;/p&gt;

&lt;p&gt;When Postman can’t match a response to your request it issues a standard response:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{&quot;error&quot;:{&quot;name&quot;:&quot;mockRequestNotFoundError&quot;,&quot;message&quot;:&quot;To mock this request add an example response for the mock server to return.&quot;,&quot;header&quot;:&quot;You need an example&quot;}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When MockLab can’t match a request it will return a diff between the most similar stub
it could find and the request:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl https://example.mocklab.io/v1/users -X PUT -d '{ &quot;wrong&quot;: &quot;stuff&quot; }'

                                               Request was not matched
                                               =======================

-----------------------------------------------------------------------------------------------------------------------
| Closest stub                                             | Request                                                  |
-----------------------------------------------------------------------------------------------------------------------
                                                           |
JSON request body matching                                 |
                                                           |
POST                                                       | PUT                                                 &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HTTP method does not match
[path] /v1/users                                           | /v1/users
                                                           |
{                                                          | {                                                   &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; Body does not match
  &quot;id&quot; : 1234,                                             |   &quot;wrong&quot; : &quot;stuff&quot;
  &quot;name&quot; : &quot;${json-unit.any-string}&quot;,                      | }
  &quot;isAdminUser&quot; : &quot;${json-unit.any-boolean}&quot;               |
}                                                          |
                                                           |
-----------------------------------------------------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;importing-from-other-formats&quot;&gt;Importing from other formats&lt;/h2&gt;

&lt;p&gt;There are a number of widely used formats for describing HTTP interfaces and events.
If you’re already working with one of these, being able to generate a mock API
automatically from it can be a big time-saver.&lt;/p&gt;

&lt;p&gt;Postman can import from &lt;a href=&quot;https://swagger.io/specification/&quot; target=&quot;_blank&quot;&gt;OpenAPI&lt;/a&gt;,
&lt;a href=&quot;https://raml.org/&quot; target=&quot;_blank&quot;&gt;RAML&lt;/a&gt;,
&lt;a href=&quot;https://graphql.org/&quot; target=&quot;_blank&quot;&gt;GraphQL&lt;/a&gt;,
&lt;a href=&quot;https://curl.se/&quot; target=&quot;_blank&quot;&gt;curl&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Web_Application_Description_Language&quot; target=&quot;_blank&quot;&gt;WADL&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/postman-vs-mocklab/postman-import.png&quot; style=&quot;border: none&quot; alt=&quot;Postman import&quot; /&gt;&lt;/p&gt;

&lt;p&gt;MockLab supports &lt;a href=&quot;https://swagger.io/specification/&quot; target=&quot;_blank&quot;&gt;OpenAPI&lt;/a&gt;,
&lt;a href=&quot;https://swagger.io/specification/&quot; target=&quot;_blank&quot;&gt;Swagger&lt;/a&gt;,
Postman collections and
&lt;a href=&quot;http://wiremock.org&quot; target=&quot;_blank&quot;&gt;WireMock&lt;/a&gt; JSON:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/postman-vs-mocklab/mocklab-import.png&quot; style=&quot;border: none&quot; alt=&quot;MockLab import&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;customising-the-import&quot;&gt;Customising the import&lt;/h3&gt;

&lt;p&gt;When importing from a specification format like OpenAPI (one that represents a contract
rather than just a list of request/response pairs) it’s useful to be able to exert
some control over how your examples or stubs are generated.&lt;/p&gt;

&lt;p&gt;Postman presents a number of options prior to executing the import that permit you
to choose things like whether response examples or schemas will be used to generate
the request and response parameters in your Postman examples:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/postman-vs-mocklab/postman-openapi-import-options.png&quot; style=&quot;border: none&quot; alt=&quot;Postman OpenAPI import options&quot; /&gt;&lt;/p&gt;

&lt;p&gt;MockLab takes a slightly different approach. Rather than offering a set of options
up-front, it understands a set of &lt;a href=&quot;https://swagger.io/docs/specification/openapi-extensions/&quot; target=&quot;_blank&quot;&gt;extended attributes&lt;/a&gt;
that you can add to your OpenAPI spec. These allow you to set specific request
parameters in the generated stubs, rather than getting the randomly generated defaults.
In this way you can also control how randomly-generated values are produced when response bodies
are generated from schemas.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;x-faker&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name.first_name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See the &lt;a href=&quot;https://www.mocklab.io/docs/swagger/#customising-the-import&quot; target=&quot;_blank&quot;&gt;Swagger documentation&lt;/a&gt;
for details on using extended attributes.&lt;/p&gt;

&lt;h2 id=&quot;dynamic-responses&quot;&gt;Dynamic responses&lt;/h2&gt;

&lt;p&gt;A basic stub or example will return a fixed response each time it is matched.
However, in some cases it’s necessary to generate the response dynamically.&lt;/p&gt;

&lt;p&gt;Reasons for this include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Copying data into the response from the request e.g a URL path parameter or element from the request body.&lt;/li&gt;
  &lt;li&gt;Including random data such as names, dates, job titles, addresses etc.&lt;/li&gt;
  &lt;li&gt;Generating values that must be calculated per request e.g. when a cryptographic signature must be included.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Postman supports a rich set of random value generators based on &lt;a href=&quot;https://www.npmjs.com/package/faker&quot; target=&quot;_blank&quot;&gt;Faker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can include tokens like  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{$randomFirstName}}&lt;/code&gt;  in an example’s
response body and they will be substitued with a random value of the type specified
when the response is served. You can find the &lt;a href=&quot;https://learning.postman.com/docs/writing-scripts/script-references/variables-list/&quot; target=&quot;_blank&quot;&gt;full list of available tokens here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Postman also supports using wildcards as variables in response bodies, so for instance
if your example’s URL is  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/v1/users/{{user_id}}&lt;/code&gt;  then you
can return the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user_id&lt;/code&gt; in your response body by including  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/v1/users/{{user_id}}&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/postman-vs-mocklab/postman-dynamic-variable.png&quot; style=&quot;border: none&quot; alt=&quot;Postman dynamic variable&quot; /&gt;&lt;/p&gt;

&lt;p&gt;MockLab supports full &lt;a href=&quot;https://handlebarsjs.com/&quot; target=&quot;_blank&quot;&gt;Handlebars&lt;/a&gt;
template syntax in its response bodies and headers. This enables &lt;a href=&quot;/docs/response-templating/conditional-logic-and-iteration/&quot; target=&quot;_blank&quot;&gt;conditional logic and looping&lt;/a&gt;, variables, and access to a library of functions via Handlebars helpers.&lt;/p&gt;

&lt;p&gt;The model provided to the template
includes all &lt;a href=&quot;/docs/response-templating/basics/#the-data-model&quot; target=&quot;_blank&quot;&gt;attributes of the incoming request&lt;/a&gt;, so it’s possible to include
URL path elements, query parameters, header and the request body in your responses.&lt;/p&gt;

&lt;p&gt;Additionally, there are a number of Handlebars helpers to extract and transform
&lt;a href=&quot;/docs/response-templating/string-helpers/&quot; target=&quot;_blank&quot;&gt;text&lt;/a&gt;/&lt;a href=&quot;/docs/response-templating/json/&quot; target=&quot;_blank&quot;&gt;JSON&lt;/a&gt;/&lt;a href=&quot;/docs/response-templating/xml/&quot; target=&quot;_blank&quot;&gt;XML&lt;/a&gt;,
manipulate &lt;a href=&quot;/docs/response-templating/dates-and-times/&quot; target=&quot;_blank&quot;&gt;dates/times&lt;/a&gt;, generate &lt;a href=&quot;/docs/response-templating/random-values/&quot; target=&quot;_blank&quot;&gt;random strings&lt;/a&gt;
(the full Faker set isn’t supported yet) and generate properly constructed, signed &lt;a href=&quot;/docs/response-templating/jwt/&quot; target=&quot;_blank&quot;&gt;JSON Web Tokens (JWTs)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/postman-vs-mocklab/mocklab-response-templating.png&quot; style=&quot;width: 80%;padding: 15px&quot; alt=&quot;MockLab response templating&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;response-delays&quot;&gt;Response delays&lt;/h2&gt;

&lt;p&gt;Mock servers often return responses faster than their real API counterparts.
This is great when you just want your functional test suite to run as fast as possible,
but if you’re testing your app’s UX with realistic timings, or want to check that
a timeout is configured correctly then you need to be able to add artificial delay
to your responses.&lt;/p&gt;

&lt;p&gt;Postman permits you to specify a fixed delay at the mock server level.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/postman-vs-mocklab/postman-response-delay.png&quot; alt=&quot;Postman response delay&quot; /&gt;&lt;/p&gt;

&lt;p&gt;MockLab supports &lt;a href=&quot;/docs/delays/&quot; target=&quot;_blank&quot;&gt;fixed, random and chunked delays&lt;/a&gt; at the individual stub level.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/postman-vs-mocklab/mocklab-response-delay.png&quot; style=&quot;width: 80%&quot; alt=&quot;MockLab response delay&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;automation&quot;&gt;Automation&lt;/h2&gt;

&lt;p&gt;In modern development and testing workflows it’s common to want to automate the setup of
your environment and to be able to operate your tools programmatically. Both products provide APIs for these purposes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.postman.com/postman/workspace/postman-public-workspace/folder/12959542-6c733d02-0bec-4bcb-bb36-59db8d941198?ctx=documentation&quot; target=&quot;_blank&quot;&gt;Postman’s API&lt;/a&gt;
supports create/update/delete of mock servers and collections,
allowing you to automatically configure the mock servers available to your environment
and the specific examples served by them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/postman-vs-mocklab/postman-api.png&quot; style=&quot;border:none;width:30%&quot; alt=&quot;Postman API&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/docs/provisioning/&quot; target=&quot;_blank&quot;&gt;MockLab’s Provisioning API&lt;/a&gt;
allows mock APIs to be created and deleted.&lt;/p&gt;

&lt;p&gt;Once created a mock API has its own &lt;a href=&quot;/docs/mocking/&quot; target=&quot;_blank&quot;&gt;Mocking API&lt;/a&gt;
which supports create/update/delete of stubs, querying of the request log and control
of other features such as recording.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/postman-vs-mocklab/mocklab-api.png&quot; style=&quot;border:none&quot; alt=&quot;MockLab API&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;other-features&quot;&gt;Other features&lt;/h2&gt;

&lt;p&gt;MockLab provides a few extra capabilities that are not yet supported by Postman.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/docs/recording-stubs/&quot; target=&quot;_blank&quot;&gt;Recording&lt;/a&gt; - the ability to intercept HTTP traffic between your app (or a client tool)
and an API, converting it into a set of stubs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/docs/proxying/&quot; target=&quot;_blank&quot;&gt;Proxying&lt;/a&gt; - conditionally forwarding requests to another API. This is useful
when you want to test against a real API, but mock the parts of it that haven’t yet been implemented.
It’s also a good way to reliably return otherwise hard-to-reproduce errors.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/docs/simulating-faults/&quot; target=&quot;_blank&quot;&gt;Faults&lt;/a&gt; - a MockLab stub can respond with a number of network faults including dropped
connections and garbage HTTP content.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Performance testing&lt;/strong&gt; - Mock servers in Postman are rate limited, meaning they’re not
practical for use in a load test. MockLab’s Performance plans provide dedicated host
capacity, no rate limiting and a performance metrics dashboard.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Postman mock servers are a great solution if you already have Postman in your
workflow, your request matching requirements are simple and you want a
straightforward solution that’s tightly integrated with your existing setup.&lt;/p&gt;

&lt;p&gt;MockLab may be the best choice if you need fine control over how requests are matched,
advanced response templating, recording, proxying, a comprehensive API or support for performance testing.&lt;/p&gt;

&lt;p&gt;And remember, you can &lt;a href=&quot;https://www.mocklab.io/docs/import-export/postman/&quot; target=&quot;_blank&quot;&gt;import your Postman collections&lt;/a&gt; into MockLab to get started.&lt;/p&gt;

&lt;div class=&quot;mid-article-cta&quot;&gt;
  &lt;p class=&quot;mid-article-cta__text&quot;&gt;
    If you've made it this far, why not give MockLab a try?
  &lt;/p&gt;

  &lt;p class=&quot;mid-article-cta__text&quot;&gt;
    It's quick, simple and free to get started, and it has the flexibility to grow with your project's testing demands.
  &lt;/p&gt;

  &lt;a class=&quot;mid-article-cta__learn-more&quot; href=&quot;https://get.mocklab.io/?utm_source=www.mocklab.io&amp;amp;utm_medium=blog&amp;amp;utm_campaign=postman-vs-mocklab-learn-more-cta&quot; title=&quot;Learn more&quot;&gt;Learn more&lt;/a&gt;

  &lt;a class=&quot;mid-article-cta__get-started&quot; href=&quot;https://app.mocklab.io/login?for=signup&amp;amp;utm_source=www.mocklab.io&amp;amp;utm_medium=blog&amp;amp;utm_campaign=postman-vs-mocklab-get-started-cta&quot; title=&quot;Get started for free&quot; target=&quot;_blank&quot;&gt;Get started for free&lt;/a&gt;
&lt;/div&gt;</content><author><name>Tom Akehurst</name></author><category term="Postman" /><category term="MockLab" /><category term="API Mocking" /><summary type="html">Postman offers the ability to create mock mock servers, while mocking APIs is MockLab's main focus. This article compares their approaches and highlights their respective strengths.</summary></entry><entry><title type="html">Which Java HTTP client should I use in 2020?</title><link href="https://www.mocklab.io/blog/which-java-http-client-should-i-use-in-2020/" rel="alternate" type="text/html" title="Which Java HTTP client should I use in 2020?" /><published>2020-10-12T00:00:00+01:00</published><updated>2020-10-12T00:00:00+01:00</updated><id>https://www.mocklab.io/blog/which-java-http-client-should-i-use-in-2020</id><content type="html" xml:base="https://www.mocklab.io/blog/which-java-http-client-should-i-use-in-2020/">&lt;p&gt;HTTP has become the dominant protocol for integration of networked programs, and consequently many (possibly most) Java projects need to be able to make HTTP calls to other systems.&lt;/p&gt;

&lt;p&gt;As with many things in the Java ecosystem, a broad array of alternatives exist for achieving this, both via core libraries and open source.&lt;/p&gt;

&lt;p&gt;This can make choosing the right HTTP client less than straightforward. This article aims to provide an overview of the major libraries, with a focus on the characteristics you’re likely to care about when making a selection for your project.&lt;/p&gt;

&lt;p&gt;We’re only going to discuss clients that actually implement the HTTP protocol, so libraries such as Spring’s RestTemplate or Feign that act as higher-level wrappers will not be discussed (although we may look at these in a future article).&lt;/p&gt;

&lt;h2 id=&quot;criteria&quot;&gt;Criteria&lt;/h2&gt;

&lt;p&gt;So what should we consider when choosing an HTTP client?&lt;/p&gt;

&lt;p&gt;Obviously, each project’s requirements are somewhat unique, but there are several common factors that most teams would wish to consider:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Features&lt;/li&gt;
  &lt;li&gt;API style&lt;/li&gt;
  &lt;li&gt;Quality and maturity&lt;/li&gt;
  &lt;li&gt;Maintenance and community&lt;/li&gt;
  &lt;li&gt;Operability, reliability and observability&lt;/li&gt;
  &lt;li&gt;Security&lt;/li&gt;
  &lt;li&gt;Performance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last three of these are deep topics in their own right, and we’ll write more about these in future articles.&lt;/p&gt;

&lt;p&gt;While some factors are somewhat qualitative e.g. documentation, the following features can easily be described in yes/no form and are summarised for each client in the table below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Synchronous vs. asynchronous API&lt;/strong&gt;&lt;br /&gt;
Whether the client supports a synchronous (blocking) call style, asynchronous (non-blocking) or both.&lt;/p&gt;

&lt;p&gt;We also indicate what style (or styles) of async API is presented, if any. In practice, this is one or more of futures, callbacks or reactive streams.&lt;/p&gt;

&lt;p&gt;It’s worth pointing out that although most clients with an asynchronous API only support one
style (futures or callbacks typically), there are a number of wrapper libraries
such as Square’s &lt;a href=&quot;https://square.github.io/retrofit/&quot; target=&quot;_blank&quot;&gt;Retrofit&lt;/a&gt; or Spring’s &lt;a href=&quot;https://www.baeldung.com/spring-5-webclient&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;WebClient&lt;/em&gt;&lt;/a&gt; that adapt these to other styles such as reactive streams.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTTP/2&lt;/strong&gt;&lt;br /&gt;
Support for version 2 of the HTTP protocol.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Forms&lt;/strong&gt;&lt;br /&gt;
Support for posting of form data to the server.&lt;/p&gt;

&lt;p&gt;Note: all clients can do this if you’re willing to build up the request from scratch yourself, so what we’re really talking about here is whether a specific API is provided.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Multipart request and file upload&lt;/strong&gt;&lt;br /&gt;
Support for sending multipart requests to the server.&lt;/p&gt;

&lt;p&gt;As with forms, we’re interested in whether the client provides an API specifically for this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cookies&lt;/strong&gt;&lt;br /&gt;
Receives, stores, sends and allows manipulation of cookies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Authentication&lt;/strong&gt;&lt;br /&gt;
Support for HTTP authentication protocols. The most common of these are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Basic_access_authentication&quot; target=&quot;_blank&quot;&gt;HTTP Basic&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Digest_access_authentication&quot; target=&quot;_blank&quot;&gt;Digest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/NT_LAN_Manager&quot; target=&quot;_blank&quot;&gt;NTLM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/SPNEGO&quot; target=&quot;_blank&quot;&gt;SPNEGO&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Kerberos_(protocol)&quot; target=&quot;_blank&quot;&gt;Kerberos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While all of the clients discussed can in principle support any authentication scheme by allowing setting of request headers and request parameters, only some offer explicit extension points into which authentication implementations can be plugged, and fewer still offer common schemes out of the box.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Transparent content compression/decompression&lt;/strong&gt;&lt;br /&gt;
Whether the client can perform &lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP_compression&quot; target=&quot;_blank&quot;&gt;compression and decompression&lt;/a&gt;
of content via (most commonly) &lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;Deflate&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Gzip&quot; target=&quot;_blank&quot;&gt;GZip&lt;/a&gt; or
&lt;a href=&quot;https://en.wikipedia.org/wiki/Brotli&quot; target=&quot;_blank&quot;&gt;Brotli&lt;/a&gt;
without requiring the caller to explicitly perform the encode and decode steps.&lt;/p&gt;

&lt;p&gt;At present GZip is by far the most common algorithm.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Caching&lt;/strong&gt;&lt;br /&gt;
Support for caching of HTTP responses according to the caching elements of the HTTP standard.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Websockets&lt;/strong&gt;&lt;br /&gt;
Support for the &lt;a href=&quot;https://en.wikipedia.org/wiki/WebSocket&quot; target=&quot;_blank&quot;&gt;Websockets&lt;/a&gt; extension to the HTTP spec.&lt;/p&gt;

&lt;h2 id=&quot;configuration-options&quot;&gt;Configuration options&lt;/h2&gt;
&lt;p&gt;The potential range of configuration options for an HTTP client is large, and some of the clients discussed here offer very fine-grained control over both high and low-level aspects of their behaviour.&lt;/p&gt;

&lt;p&gt;However, there are a few settings that are likely to be of interest to most teams (at some stage):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Connect timeout&lt;/li&gt;
  &lt;li&gt;Socket read timeout&lt;/li&gt;
  &lt;li&gt;Redirect policy&lt;/li&gt;
  &lt;li&gt;Pooled connection limit - overall and per destination/route&lt;/li&gt;
  &lt;li&gt;Idle connection timeout&lt;/li&gt;
  &lt;li&gt;Proxy server address and authentication settings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A further characteristic to be aware of is that some clients (specifically the core Java ones) only expose certain parameters as system properties. This means that a) they can only be set globally per running JVM, and b) they are much harder to integrate with other configuration systems.&lt;/p&gt;

&lt;p&gt;In general, being able to set configuration parameters programmatically, at the client instance level is preferable as this permits multiple clients to exist differing options and simpler integration into frameworks and apps with their own config arrangements. It also makes life much easier if you’re deploying into an environment such as a servlet container where you may not have full control over startup parameters.&lt;/p&gt;

&lt;div class=&quot;mid-article-cta&quot;&gt;
  &lt;p class=&quot;mid-article-cta__text&quot;&gt;
    If you've made it this far there's a good chance you're building a system that
    relies on 3rd party APIs. MockLab can help you test your system when those
    APIs don't exist yet, have flakey test environments or are expensive to call.
  &lt;/p&gt;

  &lt;p class=&quot;mid-article-cta__text&quot;&gt;
    It's quick and simple to get started with and it's powered by WireMock so it
    has the flexibility to grow with your project's testing demands.
  &lt;/p&gt;

  &lt;a class=&quot;mid-article-cta__learn-more&quot; href=&quot;https://get.mocklab.io/?utm_source=www.mocklab.io&amp;amp;utm_medium=blog&amp;amp;utm_campaign=java-http-clients-learn-more-cta&quot; title=&quot;Learn more&quot; target=&quot;_blank&quot;&gt;Learn more&lt;/a&gt;

  &lt;a class=&quot;mid-article-cta__get-started&quot; href=&quot;https://app.mocklab.io/login?for=signup&amp;amp;utm_source=www.mocklab.io&amp;amp;utm_medium=blog&amp;amp;utm_campaign=java-http-clients-get-started-cta&quot; title=&quot;Get started for free&quot; target=&quot;_blank&quot;&gt;Get started for free&lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-clients&quot;&gt;The clients&lt;/h2&gt;
&lt;p&gt;The HTTP clients we will examine are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Java’s &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/HttpURLConnection.html&quot; target=&quot;_blank&quot;&gt;HttpURLConnection&lt;/a&gt; and &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/javax/net/ssl/HttpsURLConnection.html&quot; target=&quot;_blank&quot;&gt;HttpsURLConnection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The new &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpClient.html&quot; target=&quot;_blank&quot;&gt;HttpClient&lt;/a&gt;, introduced in Java 11&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hc.apache.org/httpcomponents-client-5.0.x/index.html&quot; target=&quot;_blank&quot;&gt;Apache HTTPClient&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://square.github.io/okhttp/&quot; target=&quot;_blank&quot;&gt;OkHttpClient&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/AsyncHttpClient/async-http-client&quot; target=&quot;_blank&quot;&gt;AsyncHttpClient&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/jetty/documentation/current/http-client.html&quot; target=&quot;_blank&quot;&gt;Jetty HttpClient&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below is a summary of the salient information and features for each client:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Java version compatibility (current version of client)&lt;/th&gt;
      &lt;th&gt;Original release date&lt;/th&gt;
      &lt;th&gt;Latest release (as of September 2020)&lt;/th&gt;
      &lt;th&gt;Sync/Async&lt;/th&gt;
      &lt;th&gt;Async API style(s)&lt;/th&gt;
      &lt;th&gt;HTTP/2&lt;/th&gt;
      &lt;th&gt;Forms&lt;/th&gt;
      &lt;th&gt;Multipart / file upload&lt;/th&gt;
      &lt;th&gt;Cookies&lt;/th&gt;
      &lt;th&gt;Authentication&lt;/th&gt;
      &lt;th&gt;Transparent content compression&lt;/th&gt;
      &lt;th&gt;Caching&lt;/th&gt;
      &lt;th&gt;Websockets&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/images/http-clients/old-java-logo.png&quot; style=&quot;border: none; height: 50px&quot; alt=&quot;Old Java logo&quot; /&gt;&lt;br /&gt; HttpURLConnection&lt;/td&gt;
      &lt;td&gt;1.1+ (HTTP)&lt;br /&gt;1.4+ (HTTPS)&lt;/td&gt;
      &lt;td&gt;1997 (with JDK 1.1)&lt;br /&gt;2002 (with JDK 1.4)&lt;/td&gt;
      &lt;td&gt;September 2020 (with Java SE 15)&lt;/td&gt;
      &lt;td&gt;Sync only&lt;/td&gt;
      &lt;td&gt;N/A&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/images/http-clients/new-java-logo.png&quot; style=&quot;border: none; height: 50px&quot; alt=&quot;New Java logo&quot; /&gt;&lt;br /&gt; Java HttpClient&lt;/td&gt;
      &lt;td&gt;9+ (as incubator module) 11+ (GA)&lt;/td&gt;
      &lt;td&gt;September 2018 (with Java SE 11)&lt;/td&gt;
      &lt;td&gt;September 2020 (with Java SE 15)&lt;/td&gt;
      &lt;td&gt;Both&lt;/td&gt;
      &lt;td&gt;Futures&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Basic (not pre-emptive) Pluggable&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/images/http-clients/httpcomponents-logo.png&quot; style=&quot;border: none; height: 40px&quot; alt=&quot;Apache HTTP Components logo&quot; /&gt;&lt;br /&gt; Apache HTTPClient&lt;/td&gt;
      &lt;td&gt;7+&lt;/td&gt;
      &lt;td&gt;2001&lt;/td&gt;
      &lt;td&gt;September 2020&lt;/td&gt;
      &lt;td&gt;Both&lt;/td&gt;
      &lt;td&gt;Futures&lt;/td&gt;
      &lt;td&gt;Currently only in the 5.1 beta&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Basic&lt;br /&gt;Digest&lt;br /&gt;NTLM&lt;br /&gt;SPNEGO&lt;br /&gt;Kerberos&lt;br /&gt;Pluggable&lt;/td&gt;
      &lt;td&gt;GZip Deflate&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/images/http-clients/square-logo.png&quot; style=&quot;border: none; height: 50px&quot; alt=&quot;Square logo&quot; /&gt;&lt;br /&gt; OkHttp&lt;/td&gt;
      &lt;td&gt;8+&lt;/td&gt;
      &lt;td&gt;2013&lt;/td&gt;
      &lt;td&gt;September 2020&lt;/td&gt;
      &lt;td&gt;Both&lt;/td&gt;
      &lt;td&gt;Callbacks&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Pluggable&lt;/td&gt;
      &lt;td&gt;GZip Deflate Brotli&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AsyncHttpClient&lt;/td&gt;
      &lt;td&gt;8+&lt;/td&gt;
      &lt;td&gt;2010&lt;/td&gt;
      &lt;td&gt;April 2020&lt;/td&gt;
      &lt;td&gt;Async only&lt;/td&gt;
      &lt;td&gt;Futures  Callbacks Reactive streams&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/images/http-clients/jetty-logo.png&quot; style=&quot;border: none; height: 40px&quot; alt=&quot;Jetty logo&quot; /&gt;&lt;br /&gt; Jetty HttpClient&lt;/td&gt;
      &lt;td&gt;8+&lt;/td&gt;
      &lt;td&gt;2009&lt;/td&gt;
      &lt;td&gt;July 2020&lt;/td&gt;
      &lt;td&gt;Both&lt;/td&gt;
      &lt;td&gt;Callbacks&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Basic&lt;br /&gt;Digest&lt;br /&gt;SPNEGO&lt;br /&gt;Pluggable&lt;/td&gt;
      &lt;td&gt;GZip&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The following sections describe each client in detail.&lt;/p&gt;

&lt;h2 id=&quot;httpurlconnection--httpsurlconnection&quot;&gt;HttpURLConnection / HttpsURLConnection&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/http-clients/old-java-logo.png&quot; style=&quot;border: none; height: 100px&quot; alt=&quot;Old Java logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/HttpURLConnection.html&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;HttpURLConnection&lt;/em&gt;&lt;/a&gt; is the oldest of the clients we’re comparing, and probably the oldest in the Java ecosystem, having been introduced way back in version 1.1 of the JDK. Its HTTPS supporting counterpart HttpsURLConnection was introduced in Java 1.4.&lt;/p&gt;

&lt;p&gt;The main advantage of using these classes is that they’re guaranteed to be available, even in older Java versions, without the need to add any external dependencies.&lt;/p&gt;

&lt;p&gt;Arguably, however, that’s where the benefits end. These classes suffer from pretty clunky API design, only offer a synchronous/blocking API, have no HTTP/2 support and lack additional features such as compression and form handling.&lt;/p&gt;

&lt;p&gt;They also exhibit some pretty questionable (or buggy, depending on your view) &lt;a href=&quot;https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6382788&quot; target=&quot;_blank&quot;&gt;default behaviour&lt;/a&gt; which has been retained throughout the versions for the sake of backwards compatibility.&lt;/p&gt;

&lt;p&gt;It’s worth noting that many “wrapper” clients such as Spring’s RestTemplate will use &lt;em&gt;Http(s)URLConnection&lt;/em&gt; as their default underlying HTTP implementation, so you can often end up using it without realising. It’s always a good idea to check how your HTTP calls are being made under the hood!&lt;/p&gt;

&lt;h3 id=&quot;configuration&quot;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;HttpURLConnection&lt;/em&gt; supports the basic set of configuration options you’d expect, but not much more. The connection pool limit and keep-alive idle timeout are only available as system properties.&lt;/p&gt;

&lt;h3 id=&quot;documentation&quot;&gt;Documentation&lt;/h3&gt;
&lt;p&gt;The official documentation is pretty much limited to just the &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/HttpURLConnection.html&quot; target=&quot;_blank&quot;&gt;Javadoc page&lt;/a&gt;, however, a plethora of 3rd party blog articles exist and at the time of writing, there are over 30k Stackoverflow questions relating to &lt;em&gt;HttpURLConnection&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;when-to-use&quot;&gt;When to use&lt;/h3&gt;
&lt;p&gt;Use it if you’re not yet on Java 11+ and you’re unable to add any more 3rd party dependencies. Otherwise, avoid!&lt;/p&gt;

&lt;h2 id=&quot;java-11-httpclient&quot;&gt;Java 11+ HttpClient&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/http-clients/new-java-logo.png&quot; style=&quot;border: none; height: 100px&quot; alt=&quot;New Java logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Java 9 introduced a brand new HTTP client as an incubator module, and this was then made generally available in Java 11.&lt;/p&gt;

&lt;p&gt;The new client has a fluent, builder-driven API which is much more legible and easier to work with than &lt;em&gt;HttpURLConnection&lt;/em&gt;. It supports both synchronous and asynchronous modes of operation, with the latter making use of Futures.&lt;/p&gt;

&lt;p&gt;A major benefit over the older Java client is support for HTTP/2, which is now becoming increasingly prevalent and offers some significant performance improvements over HTTP/1.1.&lt;/p&gt;

&lt;p&gt;The new client offers a pluggable authentication mechanism, only provides an implementation of non-preemptive HTTP Basic so if you need anything else you’ll need to implement it yourself.&lt;/p&gt;

&lt;p&gt;Transparent compression is not supported, so this is also something you’ll need to handle yourself if you need it.&lt;/p&gt;

&lt;p&gt;It does however provide support for cookies.&lt;/p&gt;

&lt;h3 id=&quot;configuration-1&quot;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Available configuration options are very similar to those for &lt;em&gt;HttpURLConnection&lt;/em&gt;, with the connection pool limit and keep-alive idle timeout also only settable via system properties.&lt;/p&gt;

&lt;p&gt;Unlike the older client, the redirect policy can be set programmatically per client instance.&lt;/p&gt;

&lt;h3 id=&quot;documentation-1&quot;&gt;Documentation&lt;/h3&gt;
&lt;p&gt;The official documentation for the new &lt;em&gt;HttpClient&lt;/em&gt; is a little bit better than for &lt;em&gt;HttpURLConnection&lt;/em&gt;, consisting of a &lt;a href=&quot;https://openjdk.java.net/groups/net/httpclient/recipes.html&quot; target=&quot;_blank&quot;&gt;recipes document&lt;/a&gt; in addition to the &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpClient.html&quot; target=&quot;_blank&quot;&gt;Javadoc&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However as the newest client in our list, inevitably less has been written about it in blogs and forums, so expect to work a little harder in the near future to find answers to your questions.&lt;/p&gt;

&lt;h3 id=&quot;when-to-use-1&quot;&gt;When to use&lt;/h3&gt;
&lt;p&gt;Use it if you’re already on Java 11+ and are happy with limited documentation and configuration options.&lt;/p&gt;

&lt;h2 id=&quot;apache-httpclient&quot;&gt;Apache HttpClient&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/http-clients/httpcomponents-logo.png&quot; style=&quot;border: none; height: 100px&quot; alt=&quot;Apache HTTP Components logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Apache HTTP client was the first widely adopted open source client to be released, arriving in its original form in 2002. Now on its 5th major version, it’s probably still the most commonly used client outside of Java’s core libraries.&lt;/p&gt;

&lt;p&gt;The Apache client is rich in features and configuration options, although at the time of writing HTTP/2 is only supported in the 5.1 beta release.&lt;/p&gt;

&lt;h3 id=&quot;community-and-maintenance&quot;&gt;Community and maintenance&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/http-clients/apache-contribution-graph.png&quot; style=&quot;border: none&quot; alt=&quot;Apache client contribution graph&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As a top-level Apache project, &lt;em&gt;HTTPClient&lt;/em&gt;’s future seems fairly well assured. Contributions continue to arrive at a steady rate, albeit one that’s a bit lower than the most actively maintained libraries in this article.&lt;/p&gt;

&lt;h3 id=&quot;configuration-2&quot;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;One of the Apache client’s strengths is its configurability. Many features of the client such as connection management and name resolution are abstracted and pluggable, so it’s possible to extensively configure them in code, or even supply your own implementations. This makes the Apache client a good bet if you have unusual or tricky requirements.&lt;/p&gt;

&lt;p&gt;While it will accept parameters supplied via system properties, all configuration can be done at the client instance level.&lt;/p&gt;

&lt;p&gt;One gotcha to watch out for with the Apache client is the low default connection pool limits - 5 per route and 25 overall. These defaults can result in significant bottlenecks in high throughput systems, so it’s always wise to review and raise these before subjecting your app to live traffic.&lt;/p&gt;

&lt;h3 id=&quot;documentation-2&quot;&gt;Documentation&lt;/h3&gt;
&lt;p&gt;The Apache client’s documentation website is produced using the Maven site generator, so it isn’t the most modern reading experience. The content of the documentation is OK if not great, providing code samples for a variety of scenarios, but without much supporting narrative.&lt;/p&gt;

&lt;p&gt;Luckily, given how widely used &lt;em&gt;HTTPClient&lt;/em&gt; is and its maturity there’s plenty of help available on Stack Overflow and 3rd party blog sites such as &lt;a href=&quot;https://www.baeldung.com/httpclient-guide&quot; target=&quot;_blank&quot;&gt;Baeldung&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;when-to-use-2&quot;&gt;When to use&lt;/h3&gt;
&lt;p&gt;The Apache client is a strong choice when you need extreme flexibility in configuring and customising behaviour. Teams that place a lot of value on familiarity and breadth of adoption may also find it the most comfortable option.&lt;/p&gt;

&lt;h2 id=&quot;okhttpclient&quot;&gt;OkHttpClient&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/http-clients/square-logo.png&quot; style=&quot;border: none; height: 100px&quot; alt=&quot;Square logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;OkHttpClient&lt;/em&gt; is an open source library originally released in 2013 by &lt;a href=&quot;https://square.github.io/&quot; target=&quot;_blank&quot;&gt;Square&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main motivation behind OkHttp is a strong focus on production readiness - performance, reliability and security. It natively supports HTTP/2 and TLS1.3+ and has a number of fault tolerance features such as the ability to fail over between multiple IP addresses and recover from failed connection attempts. It also implements transparent content compression via Deflate, GZip and Brotli, being the only client that supports the last of these.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;OkHttpClient&lt;/em&gt;’s defaults are thoughtfully chosen. Provided you keep to the latest version, you’ll get a fast, secure and reliable setup without needing to do much of your own configuration.&lt;/p&gt;

&lt;p&gt;Since version 4 OkHttp has been written in Kotlin. Some teams see this as a downside as it means that the Kotlin standard library is pulled in as a transitive dependency (adding about 1.5MB at the time of writing), and also that debugging the client’s code is more difficult for developers not familiar with Kotlin.&lt;/p&gt;

&lt;h3 id=&quot;community-and-maintenance-1&quot;&gt;Community and maintenance&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/http-clients/okhttp-contribution-graph.png&quot; style=&quot;border: none&quot; alt=&quot;OkHttp client contribution graph&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;OkHttp&lt;/em&gt; continues to be sponsored by Square and shows a healthy, regular contribution rate. It has nearly 40k stars on GitHub and has been contributed to by over 200 individuals.&lt;/p&gt;

&lt;h3 id=&quot;configuration-3&quot;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Despite being strong on usable out-of-the-box defaults, &lt;em&gt;OkHttpClient&lt;/em&gt; provides plenty of configuration options and extension points. Everything is configurable at the client instance level, so multiple clients can exist with different settings and it’s straightforward to integrate with your configuration system.&lt;/p&gt;

&lt;p&gt;Another configuration option OkHttp provides not seen elsewhere is separate read and write timeouts.&lt;/p&gt;

&lt;h3 id=&quot;documentation-3&quot;&gt;Documentation&lt;/h3&gt;
&lt;p&gt;The OkHttp &lt;a href=&quot;https://square.github.io/okhttp/&quot; target=&quot;_blank&quot;&gt;documentation site&lt;/a&gt; is very good and nicely presented. It provides a decent level of detail for all of the major topics, a decent API reference and a search function that actually works.&lt;/p&gt;

&lt;h3 id=&quot;when-to-use-3&quot;&gt;When to use&lt;/h3&gt;
&lt;p&gt;OkHttp is the client we’d recommend by default.&lt;/p&gt;

&lt;p&gt;It has all of the features you’re likely to need, both initially and in the future, and will probably give you the fewest headaches when running in production. It has extensive options for configuration and customisation, but will usually do a perfectly good job with its default settings.&lt;/p&gt;

&lt;h2 id=&quot;asynchttpclient&quot;&gt;AsyncHttpClient&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;AsyncHttpClient&lt;/em&gt; was originally released in 2010, building on top of &lt;a href=&quot;https://netty.io/&quot; target=&quot;_blank&quot;&gt;Netty&lt;/a&gt; for fast, non-blocking I/O. Uniquely amongst our set of clients, it only presents an asynchronous API, however, it provides considerable flexibility here, supporting Futures, Callbacks and Reactive Streams API styles.&lt;/p&gt;

&lt;h3 id=&quot;community-and-maintenance-2&quot;&gt;Community and maintenance&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/http-clients/asynchttpclient-contribution-graph.png&quot; style=&quot;border: none&quot; alt=&quot;AsyncHttpClient contribution graph&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The project has mostly seen a decent level of contribution activity over the last few years. However, as of June 2020, the lead maintainer of &lt;em&gt;AsyncHttpClient&lt;/em&gt; has stepped down and is looking for a successor so its future is currently somewhat uncertain.&lt;/p&gt;

&lt;h3 id=&quot;configuration-4&quot;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;AsyncHttpClient&lt;/em&gt; provides a wealth of configuration options, allowing very fine-grained tuning of timeouts, thread pools and other high and low-level parameters. All of these are all settable from when building a client instance.&lt;/p&gt;

&lt;h3 id=&quot;documentation-4&quot;&gt;Documentation&lt;/h3&gt;
&lt;p&gt;Official documentation is limited to the README document on GitHub, which provides an adequate but brief overview of the major features and a path to getting started. It links to several blog posts which go into a bit more depth, but these are 9-10 years old so are of limited utility.&lt;/p&gt;

&lt;p&gt;A search of Stack Overflow for “asynchttpclient” yields a little over 2k results, so while you may have some success finding answers there, there’s significantly less content than for most of the other clients discussed in this article.&lt;/p&gt;

&lt;h3 id=&quot;when-to-use-4&quot;&gt;When to use&lt;/h3&gt;
&lt;p&gt;We’d hesitate to recommend &lt;em&gt;AsyncHttpClient&lt;/em&gt; at this point in time due to the uncertainty around its ongoing maintenance.&lt;/p&gt;

&lt;p&gt;However, if you’re comfortable with this risk and need a battle-tested, high performing non-blocking client then it’s still worth a look.&lt;/p&gt;

&lt;h2 id=&quot;jetty-httpclient&quot;&gt;Jetty HttpClient&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/http-clients/jetty-logo.png&quot; style=&quot;border: none; height: 80px&quot; alt=&quot;Jetty logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Jetty client has been an integral part of the Jetty project since 2009. It uses entirely non-blocking code under the hood and presents both synchronous and asynchronous APIs.&lt;/p&gt;

&lt;p&gt;HTTP/2 is supported via the inclusion of an additional library.&lt;/p&gt;

&lt;h3 id=&quot;community-and-maintenance-3&quot;&gt;Community and maintenance&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/http-clients/jetty-contribution-graph.png&quot; style=&quot;border: none&quot; alt=&quot;Jetty contribution graph&quot; /&gt;
[Contribution graph for the Jetty project overall]&lt;/p&gt;

&lt;p&gt;The Jetty project lives within the Eclipse foundation. It’s also backed by a commercial company - Webtide. Their staff (including Jetty’s originator) make regular contributions to the project and are responsive to bug reports and queries.&lt;/p&gt;

&lt;h3 id=&quot;configuration-5&quot;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;The Jetty client provides a pretty comprehensive set of configuration options. These include all of the obvious settings you’d want to tweak, plus access to lower-level tuning parameters such as the executor implementation, scheduler and byte buffer pools.&lt;/p&gt;

&lt;p&gt;One notable absence is an overall connection pool limit parameter. However, it is possible to set a per-destination limit for pooled connections, which in practice is often the more useful parameter.&lt;/p&gt;

&lt;h3 id=&quot;documentation-5&quot;&gt;Documentation&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.eclipse.org/jetty/documentation/current/http-client.html&quot; target=&quot;_blank&quot;&gt;Jetty client documentation pages&lt;/a&gt; are reasonably good, with a decent “getting started” section and fairly detailed coverage of the major features. Plenty of code examples are provided, with supporting narrative.&lt;/p&gt;

&lt;h3 id=&quot;when-to-use-5&quot;&gt;When to use&lt;/h3&gt;
&lt;p&gt;The Jetty client supports HTTP/2 and is very configurable, which makes it a good alternative to the OkHttp client if you’re not happy with the latter’s Kotlin dependencies.&lt;/p&gt;

&lt;p&gt;It may also be the right choice if you’re using Jetty server already since they share a fair amount of common code and API design. This means that things like TLS configuration work very similarly across client and server.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Hopefully, if you’ve made it this far, you’re now more informed about the range of HTTP clients available in the Java ecosystem and how to go about selecting one for your project.&lt;/p&gt;

&lt;p&gt;We’d definitely recommend avoiding &lt;em&gt;HttpURLConnection&lt;/em&gt; unless you really have no alternative, particularly now that the Java 11+ &lt;em&gt;HttpClient&lt;/em&gt; is available.&lt;/p&gt;

&lt;p&gt;If ultimate flexibility is what you need and you can do without HTTP/2 for the time being, the venerable Apache client may be the one to aim for. You’ll also benefit from its very widespread use and the abundance of information around the internet.&lt;/p&gt;

&lt;p&gt;However, all things being equal Square’s &lt;em&gt;OkHttpClient&lt;/em&gt; would be our recommendation for teams choosing a new client library. It’s feature-rich, highly configurable and works well in production out of the box.&lt;/p&gt;

&lt;h2 id=&quot;about-mocklab&quot;&gt;About MockLab&lt;/h2&gt;

&lt;p&gt;MockLab is a hosted API mocking tool built on WireMock by its creators. It helps
teams quickly simulate their external API dependencies so that they can ship faster and test more
thoroughly.&lt;/p&gt;

&lt;p&gt;For more information, visit &lt;a href=&quot;https://get.mocklab.io?utm_source=www.mocklab.io&amp;amp;utm_medium=blog&amp;amp;utm_campaign=http_clients_article-bottom_cta&quot;&gt;https://get.mocklab.io&lt;/a&gt;.&lt;/p&gt;</content><author><name>Tom Akehurst</name></author><category term="Java" /><category term="HTTP" /><summary type="html">A review and comparison of all the major Java HTTP client libraries available in 2020.</summary></entry><entry><title type="html">MockLab Now Supports Swagger and Swaggerhub</title><link href="https://www.mocklab.io/blog/mocklab-now-supports-swagger-and-swaggerhub/" rel="alternate" type="text/html" title="MockLab Now Supports Swagger and Swaggerhub" /><published>2018-08-03T00:00:00+01:00</published><updated>2018-08-03T00:00:00+01:00</updated><id>https://www.mocklab.io/blog/mocklab-now-supports-swagger-and-swaggerhub</id><content type="html" xml:base="https://www.mocklab.io/blog/mocklab-now-supports-swagger-and-swaggerhub/">&lt;p&gt;&lt;img src=&quot;/images/screenshots/swagger-logo2.png&quot; alt=&quot;Swagger logo&quot; style=&quot;border:none&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://swagger.io/&quot; target=&quot;_blank&quot;&gt;Swagger&lt;/a&gt; (or the OpenAPI Specification as it’s now known) has become the de-facto standard
way to specify, document and test REST-like APIs.&lt;/p&gt;

&lt;p&gt;Given Swagger’s broad adoption and language/stack compatibility, being able to generate a
mock API from a Swagger specification offers a substantial productivity boost over coding or hand-crafting.
In addition it provides a way to ensure your mock API stays true to the real thing as it evolves.&lt;/p&gt;

&lt;p&gt;This is why we’ve launched a first beta of Swagger import in MockLab. This new feature provides a number of ways
to generate and re-generate your mock API’s stubs from a Swagger specification.&lt;/p&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;/h2&gt;

&lt;p&gt;The simplest way to get started is to paste your API spec into MockLab’s web UI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshots/stub-toolbar-with-import3.png&quot; alt=&quot;Stub toolbar&quot; style=&quot;border: none;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshots/import-stubs-dialog.png&quot; alt=&quot;Stub toolbar&quot; style=&quot;border-radius: 3px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to regularly push new specification versions via an automated process, you can do so by posting it
to MockLab’s API. See &lt;a href=&quot;/docs/swagger/#automating-imports-via-the-api&quot;&gt;the documentation page&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;On submission of a valid spec, MockLab will generate a collection of new stubs, for each combination of URL template, operation and content type.
If the spec contains response examples, these will be used, but if not the generator will fall back on the JSON schema, emitting random values that
conform to the schema constraints.&lt;/p&gt;

&lt;h2 id=&quot;swaggerhub&quot;&gt;Swaggerhub&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshots/swaggerhub-hero.png&quot; alt=&quot;Swaggerhub hero&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://swaggerhub.com&quot;&gt;Swaggerhub&lt;/a&gt; is a hosted product from Smartbear that supports authoring, collaboration and documentation of APIs.&lt;/p&gt;

&lt;p&gt;A cool feature of Swaggerhub is its ability to call a webhook when a spec is saved or published. It’s extremely simple to set up MockLab as
a receiver - just create a new webhook in the Integrations menu (&lt;img src=&quot;/images/screenshots/swaggerhub-integrations-icon.png&quot; alt=&quot;Swaggerhub integrations icon&quot; style=&quot;border:none; width: 52px;&quot; /&gt;) with a payload URL of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://my-swagger-api.mocklab.io/__admin/imports/swaggerhub&lt;/code&gt; (substituting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my-swagger-api&lt;/code&gt; with your API’s domain name):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshots/swaggerhub-webhook-dialog.png&quot; alt=&quot;Swaggerhub webhook dialog&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you’ve added this, try saving your API then heading back to MockLab and refreshing your stubs.&lt;/p&gt;

&lt;p&gt;As I mentioned at the start, this is a first beta release, and we intend to evolve and improve Swagger support based on the feedback from real use. If you love, hate or simply think this feature could be improved please drop us a message in the chat widget or
&lt;a href=&quot;mailto:info@mocklab.io&quot;&gt;by email&lt;/a&gt; and let us know!&lt;/p&gt;

&lt;div class=&quot;mid-article-cta&quot;&gt;
  &lt;p class=&quot;mid-article-cta__text&quot;&gt;
    If you've made it this far there's a good chance you're building a system that
    relies on 3rd party APIs. MockLab can help you test your system when those
    APIs don't exist yet, have flakey test environments or are expensive to call.
  &lt;/p&gt;

  &lt;p class=&quot;mid-article-cta__text&quot;&gt;
    It's quick and simple to get started with and it's powered by WireMock so it
    has the flexibility to grow with your project's testing demands.
  &lt;/p&gt;

  &lt;a class=&quot;mid-article-cta__learn-more&quot; href=&quot;https://get.mocklab.io/?utm_source=www.mocklab.io&amp;amp;utm_medium=blog&amp;amp;utm_campaign=swagger-and-swaggerhub-learn-more-cta&quot; title=&quot;Learn more&quot; target=&quot;_blank&quot;&gt;Learn more&lt;/a&gt;

  &lt;a class=&quot;mid-article-cta__get-started&quot; href=&quot;https://app.mocklab.io/login?for=signup&amp;amp;utm_source=www.mocklab.io&amp;amp;utm_medium=blog&amp;amp;utm_campaign=swagger-and-swaggerhub-get-started-cta&quot; title=&quot;Get started for free&quot; target=&quot;_blank&quot;&gt;Get started for free&lt;/a&gt;
&lt;/div&gt;</content><author><name>Tom Akehurst</name></author><category term="MockLab" /><category term="API Mocking" /><category term="Open API Specification" /><category term="Swagger" /><category term="Swaggerhub" /><summary type="html">MockLab now supports import of Swagger documents and integration with Swaggerhub.</summary></entry><entry><title type="html">Build a Paypal Sandbox for Load Testing in 10 Minutes</title><link href="https://www.mocklab.io/blog/build-a-paypal-sandbox-for-load-testing/" rel="alternate" type="text/html" title="Build a Paypal Sandbox for Load Testing in 10 Minutes" /><published>2018-07-10T00:00:00+01:00</published><updated>2018-07-10T00:00:00+01:00</updated><id>https://www.mocklab.io/blog/build-a-paypal-sandbox-for-load-testing</id><content type="html" xml:base="https://www.mocklab.io/blog/build-a-paypal-sandbox-for-load-testing/">&lt;div class=&quot;video&quot;&gt;
&lt;script src=&quot;https://fast.wistia.com/embed/medias/tz7u9ot0sj.jsonp&quot; async=&quot;&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://fast.wistia.com/assets/external/E-v1.js&quot; async=&quot;&quot;&gt;&lt;/script&gt;&lt;div class=&quot;wistia_responsive_padding&quot; style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;&lt;div class=&quot;wistia_responsive_wrapper&quot; style=&quot;height:100%;left:0;position:absolute;top:0;width:100%;&quot;&gt;&lt;div class=&quot;wistia_embed wistia_async_tz7u9ot0sj videoFoam=true&quot; style=&quot;height:100%;position:relative;width:100%&quot;&gt;&lt;div class=&quot;wistia_swatch&quot; style=&quot;height:100%;left:0;opacity:0;overflow:hidden;position:absolute;top:0;transition:opacity 200ms;width:100%;&quot;&gt;&lt;img src=&quot;https://fast.wistia.com/embed/medias/tz7u9ot0sj/swatch&quot; style=&quot;filter:blur(5px);height:100%;object-fit:contain;width:100%;&quot; alt=&quot;&quot; onload=&quot;this.parentNode.style.opacity=1;&quot; /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Modern e-commerce websites and apps need to be fast and stable in order to avoid losing swathes of customers to competitors.&lt;/p&gt;

&lt;p&gt;Achieving this requires regular performance testing of systems, but this is a problem for sites that accept payments with Paypal since
running high load against their sandbox is specifically prohibited by their terms of service.&lt;/p&gt;

&lt;p&gt;So what can you do?&lt;/p&gt;

&lt;p&gt;One option is to simply have your load test stop short of the final step of your checkout. This is less than ideal for (hopefully) obvious reasons.&lt;/p&gt;

&lt;p&gt;Another option is to mock the part of the app’s code that calls Paypal during load testing. This is an improvement, but still means critical bits of code
used in production won’t be tested.&lt;/p&gt;

&lt;p&gt;A better solution is to build a simulation of the Paypal API and connect your test environment to it.&lt;/p&gt;

&lt;p&gt;MockLab is a tool specifically built for this purpose, and the rest of this article will focus on how you can use it to quickly construct a mock Paypal API
suitable for performance testing.&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;To begin, you need to have logged into MockLab and created a new, empty mock API. You can &lt;a href=&quot;https://app.mocklab.io/login?for=signup&quot; target=&quot;_blank&quot;&gt;sign up here&lt;/a&gt; if you haven’t already.&lt;/p&gt;

&lt;p&gt;Once you’ve created a new mock API, grab a copy of its base URL. You can find this in the title bar:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshots/paypal-article/base-url.png&quot; alt=&quot;Base URL&quot; style=&quot;width: 70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You’ll also need the client ID and client secret from your Paypal Sandbox account.&lt;/p&gt;

&lt;p&gt;We’ve developed a simple demo app for this tutorial. If you’d like to download and run this you can find it at &lt;a href=&quot;https://github.com/mocklab/mocklab-demo-app&quot; target=&quot;_blank&quot;&gt;https://github.com/mocklab/mocklab-demo-app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you’ve checked out the app, set the Paypal endpoint in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/main/resources/application.properties&lt;/code&gt; to your mock API’s base URL:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshots/paypal-article/app-config.png&quot; alt=&quot;App configuration&quot; style=&quot;width: 70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then start the app:&lt;/p&gt;

&lt;p&gt;[Linux/OSX]&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PAYPAL_CLIENT_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;your client ID&amp;gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PAYPAL_CLIENT_SECRET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;your client secret&amp;gt;
 ./gradlew bootRun
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[Windows]&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set PAYPAL_CLIENT_ID=&amp;lt;your client ID&amp;gt;
set PAYPAL_CLIENT_SECRET=&amp;lt;your client secret&amp;gt;
gradlew bootRun
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;recording-initial-stubs&quot;&gt;Recording initial stubs&lt;/h2&gt;

&lt;p&gt;In MockLab, hit the Record button, set the target URL as Paypal’s sandbox then start recording:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshots/paypal-article/recorder.png&quot; alt=&quot;Stub recorder&quot; style=&quot;width: 70%; border: none&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go to &lt;a href=&quot;http://localhost:9000/paypal&quot; target=&quot;_blank&quot;&gt;http://localhost:9000/paypal&lt;/a&gt;, enter an amount and complete a Payment:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshots/paypal-article/paypal-demo-app.png&quot; alt=&quot;Paypal demo app&quot; style=&quot;width: 70%; border: none&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Return to MockLab and stop recording. You should now see two stubs have been appeared in the list, one for the prepare payment step and one for execute payment.&lt;/p&gt;

&lt;p&gt;If you wish you can test these with the internal request maker or an HTTP client like Postman:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshots/paypal-article/test-request-1.png&quot; alt=&quot;Test request in Postman&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;making-performance-ready&quot;&gt;Making performance ready&lt;/h2&gt;

&lt;p&gt;Recorded stubs are by default very specific. They will only be matched to an incoming request if the method, URL and body match exactly. In practice this
means they’ll only work for the exact same payment ID and amount.&lt;/p&gt;

&lt;p&gt;Additionally they will return the same response each time,
meaning IDs and dates you’d expect to be unique between requests will be the same. This causes problems if, for instance, the payment ID is saved
in a unique field by your app.&lt;/p&gt;

&lt;p&gt;All of these issues can be resolved using MockLab’s advanced matching and templated responses.&lt;/p&gt;

&lt;h3 id=&quot;create-payment&quot;&gt;Create payment&lt;/h3&gt;

&lt;p&gt;Open the create payment stub first (the one with URL &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/v1/payments/payment&lt;/code&gt;). The generated name is a bit ugly so you may wish to change this to something
more readable.&lt;/p&gt;

&lt;p&gt;Next up, in the Advanced section you’ll notice there’s a body matcher for the exact JSON that was sent during recording. We don’t need this, since we want to respond
to any create payment request, so delete this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshots/paypal-article/request-body.png&quot; alt=&quot;Request body&quot; style=&quot;width: 90%; border: none&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We want to ensure we’re sending a unique payment ID in the response each time. To do this, we need to enable &lt;a href=&quot;/docs/response-templating/&quot;&gt;response templating&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshots/enable-response-templating-screenshot.png&quot; alt=&quot;Enable response templating&quot; style=&quot;width: 30%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then we need to generate a random ID for each response. We can do this by first assigning a variable by adding this line at the top of the response body:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{{#assign 'paymentId'}}PAY-{{randomValue length=24 type='ALPHANUMERIC' uppercase=true}}{{/assign}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and replacing instances of the payment ID with the variable we set e.g.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;id&quot;: &quot;{{paymentId}}&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We also may wish to set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create_time&lt;/code&gt; field to the current time, rather than it being fixed at the one captured at record time:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;create_time&quot;: &quot;{{now}}&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Putting it all together it should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshots/paypal-article/create-payment-body.png&quot; alt=&quot;Templated create payment body&quot; style=&quot;border: none&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;execute-payment&quot;&gt;Execute payment&lt;/h3&gt;

&lt;p&gt;We need to give similar treatment to the execute payment stub, with a key difference: rather than generating the payment ID at random,
we want to extract it from the request URL.&lt;/p&gt;

&lt;p&gt;You’ll notice the request URL for the execute step is also very specific - it will only match the exact payment ID passed. We can fix this by
converting it to a regular expression (not that the URL match type has also changed to ‘Path Regex’):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshots/paypal-article/url-regex.png&quot; alt=&quot;URL regular expression&quot; style=&quot;border: none&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next we’ll give the response body the same treatment as with the create payment stub, but extracting the ID from the URL:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{{#assign 'paymentId'}}{{request.path.[3]}}{{/assign}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(Ensure you change substitute the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paymentId&lt;/code&gt; variables &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;now&lt;/code&gt; variables where appropriate as before)&lt;/p&gt;

&lt;h2 id=&quot;adding-delays-for-extra-realism&quot;&gt;Adding delays for extra realism&lt;/h2&gt;

&lt;p&gt;Since stubbed responses tend to return faster than from real APIs, this can create misleading outcomes when performance testing. To remedy this,
you can add some artificial delay to your stubs:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshots/paypal-article/random-delay.png&quot; alt=&quot;Random delay&quot; style=&quot;width: 70%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;validating-your-stubs&quot;&gt;Validating your stubs&lt;/h2&gt;

&lt;p&gt;You may wish to quickly test your updated stubs before pressing them into service. Again, you can do this with a tool like Postman, or
with MockLab’s own test request maker:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshots/paypal-article/test-requester.png&quot; alt=&quot;Test requester&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;load-testing&quot;&gt;Load testing&lt;/h2&gt;

&lt;p&gt;Now your mock API is ready for use. You can try it out by running the JMeter from the demo project and opening &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paypal-demo.jmx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can start JMeter like this:&lt;/p&gt;

&lt;p&gt;[Linux/OSX]&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd mocklab-demo-app
apache-jmeter-4.0/bin/jmeter.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[Windows]&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd mocklab-demo-app
apache-jmeter-4.0/bin/jmeter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshots/paypal-article/jmeter.png&quot; alt=&quot;JMeter&quot; style=&quot;border:none&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then just hit play to start testing!&lt;/p&gt;

&lt;div class=&quot;mid-article-cta&quot;&gt;
  &lt;p class=&quot;mid-article-cta__text&quot;&gt;
    If you've made it this far there's a good chance you're building a system that
    relies on 3rd party APIs. MockLab can help you test your system when those
    APIs don't exist yet, have flakey test environments or are expensive to call.
  &lt;/p&gt;

  &lt;p class=&quot;mid-article-cta__text&quot;&gt;
    It's quick and simple to get started with and it's powered by WireMock so it
    has the flexibility to grow with your project's testing demands.
  &lt;/p&gt;

  &lt;a class=&quot;mid-article-cta__learn-more&quot; href=&quot;https://get.mocklab.io/?utm_source=www.mocklab.io&amp;amp;utm_medium=blog&amp;amp;utm_campaign=paypal-in-10-minutes-learn-more-cta&quot; title=&quot;Learn more&quot; target=&quot;_blank&quot;&gt;Learn more&lt;/a&gt;

  &lt;a class=&quot;mid-article-cta__get-started&quot; href=&quot;https://app.mocklab.io/login?for=signup&amp;amp;utm_source=www.mocklab.io&amp;amp;utm_medium=blog&amp;amp;utm_campaign=paypal-in-10-minutes-get-started-cta&quot; title=&quot;Get started for free&quot; target=&quot;_blank&quot;&gt;Get started for free&lt;/a&gt;
&lt;/div&gt;</content><author><name>Tom Akehurst</name></author><category term="MockLab" /><category term="API Mocking" /><category term="Performance Testing" /><category term="Paypal" /><summary type="html">Build a mock of the Paypal API to allow end to end load testing of your e-commerce app.</summary></entry></feed>